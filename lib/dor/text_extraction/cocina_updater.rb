# frozen_string_literal: true

module Dor
  module TextExtraction
    # Update Cocina structural metadata with Abbyy output files that have been
    # added to a workspace directory.
    #
    # The logic for updating the Cocina is:
    #
    # 1. Look at each OCR file in the workspace's content directory.
    # 2. If the OCR file will overwrite an existing file in Cocina ensure that
    #    the file to be overwritten was generated by SDR and has not been
    #    corrected.
    # 3. If the file already exists in the Cocina update it by first deleting
    #    from the Cocina and then adding it again.
    # 4. If the file does not exist in the Cocina already look find a resource
    #    that contains the same filename "stem" and add the file there. e.g.
    #    "abc123.xml" would be added to the same resource that contains
    #    "abc123.tiff".
    #
    # rubocop:disable Metrics/ClassLength
    class CocinaUpdater
      # @param dro [Cocina::Models::Dro] the object metadata to update in place
      def self.update(dro:, logger: nil)
        CocinaUpdater.new(dro:, logger:).update
      end

      def initialize(dro:, logger: nil)
        @dro = dro
        @logger = logger || Logger.new($stdout)
      end

      def update
        rename_document_pdf
        update_cocina

        @dro
      end

      private

      # update the cocina with new files from the workspace
      def update_cocina
        # TODO: this assumes non-hierarchical files
        content_dir.children.sort.each do |file|
          @logger.info("examining #{file}")
          next if file.basename.to_s.start_with?('.')
          next unless can_overwrite?(file)

          if file_in_cocina?(file)
            update_file(file)
          else
            add_file(file)
          end
        end
      end

      # Rename the PDF that was generated for an Item of type document
      # TODO: maybe xml_ticket_create.rb should be adjusted to create it this way?
      def rename_document_pdf
        file = find_workspace_file("#{bare_druid}.pdf")
        return unless file && document?

        new_filename = content_dir + "#{bare_druid}-generated.pdf"
        file.rename(new_filename)

        add_file_to_new_resource(new_filename)
      end

      def update_file(path)
        @logger.info("updating #{path} in cocina")
        resource = find_resource(path)

        delete_file_from_resource(path, resource)
        add_file_to_resource(path, resource)
      end

      def add_file(path)
        @logger.info("adding #{path} to cocina")
        resource = find_resource_with_stem(path)

        # NOTE: we want to add item level pdf and txt files as new resources.
        if resource && !path.basename.to_s.match(/^#{bare_druid}\.(pdf|txt)$/)
          add_file_to_resource(path, resource)
        else
          add_file_to_new_resource(path)
        end
      end

      def add_file_to_resource(path, resource)
        resource.structural.contains.push(file(path))
      end

      def delete_file_from_resource(path, resource)
        resource.structural.contains.delete_if { |file| file.filename == path.basename.to_s }
      end

      def add_file_to_new_resource(path)
        @dro.structural.contains.push(
          Cocina::Models::FileSet.new(
            externalIdentifier: resource_identifier,
            type: resource_type(path),
            version: @dro.version,
            label: resource_label(path),
            structural: { contains: [file(path)] }
          )
        )
      end

      def file_in_cocina?(path)
        find_cocina_file(path) ? true : false
      end

      def find_cocina_file(path)
        dro_files.find { |file| file.filename == path.basename.to_s }
      end

      def dro_files
        # TODO: replace with Cocina::Models::Utils.files when that's available
        @dro.structural.contains.flat_map do |fileset|
          fileset.structural.contains
        end
      end

      def find_workspace_file(filename)
        path = content_dir + filename
        path.exist? ? path : nil
      end

      # prevent non SDR generated OCR and corrected OCR from being overwritten
      def can_overwrite?(path)
        file = find_cocina_file(path)
        if !file || (file.sdrGeneratedText == true && file.correctedForAccessibility == false)
          true
        else
          # remove it from the workspace so that accessionWF doesn't get confused
          @logger.info("preventing update of #{file.filename} sdrGeneratedText=#{file.sdrGeneratedText} correctedForAccessibility=#{file.correctedForAccessibility}")
          path.delete
          false
        end
      end

      # Find a Cocina resource that contains the given filename.
      # @param path {String} - the path to look for
      # @return {FileSet, nil} - the resource or nil if it is not found
      def find_resource(path)
        @dro.structural.contains.detect do |resource|
          resource.structural.contains.detect do |file|
            file.filename == path.basename.to_s
          end
        end
      end

      # Find a Cocina resource for the given path by looking for a resource that has a matching filename "stem".
      # @param path {String} - the path to look for
      # @return {FileSet, nil} - the resource or nil if it is not found
      def find_resource_with_stem(path)
        file_stem = stem(path)
        @dro.structural.contains.detect do |resource|
          resource.structural.contains.detect do |file|
            stem(file.filename) == file_stem
          end
        end
      end

      # rubocop:disable Metrics/MethodLength
      def file(path)
        object_file = ::Assembly::ObjectFile.new(path)
        Cocina::Models::File.new(
          externalIdentifier: file_identifier,
          label: object_file.filename,
          use: 'transcription',
          sdrGeneratedText: true,
          correctedForAccessibility: false,
          type: Cocina::Models::ObjectType.file,
          filename: object_file.filename,
          version: @dro.version,
          hasMimeType: object_file.mimetype,
          hasMessageDigests: message_digests(object_file),
          size: object_file.filesize,
          access:,
          administrative:
        )
      end
      # rubocop:enable Metrics/MethodLength

      def access
        {
          view: 'world',
          download: 'world'
        }
      end

      def administrative
        {
          publish: true,
          sdrPreserve: true,
          shelve: true
        }
      end

      def message_digests(object_file)
        [
          {
            type: 'md5',
            digest: object_file.md5
          },
          {
            type: 'sha1',
            digest: object_file.sha1
          }
        ]
      end

      def resource_label(path)
        extension = path.extname
        if extension == '.txt'
          'Plain text OCR (uncorrected)'
        elsif extension == '.pdf' && document?
          'PDF (with automated OCR)'
        elsif extension == '.pdf'
          'Full PDF'
        else
          raise "Unable to determine resource label for #{path}"
        end
      end

      def resource_type(path)
        if path.extname == '.pdf' && document?
          Cocina::Models::FileSetType.document
        else
          Cocina::Models::FileSetType.object
        end
      end

      def stem(path)
        File.basename(path, '.*').to_s
      end

      def file_identifier
        "https://cocina.sul.stanford.edu/file/#{SecureRandom.uuid}"
      end

      def resource_identifier
        "#{bare_druid}_#{@dro.structural.contains.length + 1}"
      end

      def bare_druid
        druid_tools.id
      end

      def content_dir
        Pathname.new(druid_tools.content_dir)
      end

      def druid_tools
        @druid_tools ||= DruidTools::Druid.new(@dro.externalIdentifier, Settings.sdr.local_workspace_root)
      end

      def document?
        @dro.type == Cocina::Models::ObjectType.document
      end
    end
  end
  # rubocop:enable Metrics/ClassLength
end
