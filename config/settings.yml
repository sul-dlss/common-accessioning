# Graveyard Admin Policy
graveyard_admin_policy:
  druid: 'druid:kg712km1576' # This value varies by environment and is managed in shared_configs

dor_services:
  url:  'https://dor-services-test.stanford.test'
  token: secret-token

assembly:
  root_dir:  # directories to search for content that should be acted upon by the robots
    - spec/test_input
    - spec/test_input2
  stub_cm_file_name: stubContentMetadata.xml # the name of the stub contentMetadata file
  # (e.g. oo000oo0001_00_001.tif and oo000oo0001_05_001.jp2, then a "false" setting here would NOT generate a new jp2 even though there is no filename clash)
  tmp_folder: /tmp # tmp file location for jp2-create and imagemagick

sdr:
  local_workspace_root: /dor/workspace
  staging_root: /sdr-deposit-staging
  abbyy:
    # Windows-style paths for the ABBYY machine, referenced in XML tickets
    remote_output_path: /tmp/output
    remote_result_path: /tmp/result
    # Unix-style paths for the common-accessioning VM, used to manage files
    local_ticket_path: /tmp/input
    local_result_path: /tmp/result
    local_output_path: /tmp/output
    local_exception_path: /tmp/errors

tech_md_service:
  url: 'https://dor-techmd-test.stanford.test'
  token: 'rake-generate-token-me'

# Used by Dor::DigitalStacksService, Dor::PublishMetadataService, and Dor::ShelvingService
stacks:
  local_workspace_root: ~

workflow:
  url: https://example.com/workflow/
  logfile: 'log/workflow_service.log'
  shift_age: 'weekly'
  timeout: 60

redis:
  url: ~

purl_url: 'https://purl-example.stanford.edu'

preservation_catalog:
  url: 'https://preservation-catalog-stage.stanford.edu'
  token: 'mint-token-with-target-preservation-catalog-rake-generate-token'

purl_fetcher:
  url: 'https://purl-fetcher-stage.stanford.edu'
  token: 'mint-token-with-target-purl-fetcher-rake-generate-token'

# aws related options (currently used for the speech-to-text workflow)
aws:
  region: 'us-west-2'
  access_key_id: 'fake-access'
  secret_access_key: 'fake-secret'
  speech_to_text:
    # values below can be found by running `terraform output` in terraform_aws/organizations/{env}/speech_to_text
    role_arn: 'arn:aws:iam::1234567890123:role/DevelopersRole'
    base_s3_bucket: 'bucket-name' # default bucket for storing speech-to-text file
    batch_job_queue: 'arn:aws:batch:us-west-2:1234567890123:job-queue/queue-name' # AWS Batch queue to submit jobs to
    batch_job_definition: 'arn:aws:batch:us-west-2:1234567890123:job-definition/queue-name' # AWS Batch job definition to use for job
    sqs_done_queue_url: 'https://sqs.us-west-2.amazonaws.com/queue_url_done' # queue to receive completed speech-to-text jobs


# options specific for speech-to-text generation
speech_to_text:
  filter_file: config/speech_to_text_filters.yaml
  whisper:
    options:
      model: 'large'
      word_timestamps: True
      condition_on_previous_text: False
      writer:
        max_line_width: 42
        max_line_count: 1
